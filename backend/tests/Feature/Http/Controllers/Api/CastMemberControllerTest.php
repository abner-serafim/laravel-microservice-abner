<?php

namespace Tests\Feature\Http\Controllers\Api;

use App\Http\Resources\CastMemberResource;
use App\Models\CastMember;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\Traits\TestResources;
use Tests\Traits\TestSaves;
use Tests\Traits\TestValidations;
use Tests\TestCase;

class CastMemberControllerTest extends TestCase
{
    use DatabaseMigrations, TestValidations, TestSaves, TestResources;

    protected $cast_member;
    protected $serializedFields = [
        'id',
        'name',
        'type',
        'created_at',
        'updated_at',
        'deleted_at',
    ];

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->cast_member = CastMember::factory()->create();
    }

    public function testInvalidationData()
    {
        $data = [
            'name' => '',
        ];
        $this->assertInvalidationInStoreAction($data, $this->validRequired);
        $this->assertInvalidationInUpdateAction($data, $this->validRequired);

        $data = [
            'name' => str_repeat('a', 256)
        ];
        $this->assertInvalidationInStoreAction($data, $this->validMax, $this->limitMax);
        $this->assertInvalidationInUpdateAction($data, $this->validMax, $this->limitMax);

        $data = [
            'type' => 'a'
        ];
        $this->assertInvalidationInStoreAction($data, $this->validIn);
        $this->assertInvalidationInUpdateAction($data, $this->validIn);

        $data = [
            'type' => 0
        ];
        $this->assertInvalidationInStoreAction($data, $this->validIn);
        $this->assertInvalidationInUpdateAction($data, $this->validIn);
    }

    public function testStore()
    {
        $data = [
            'name' => 'test'
        ];
        $response = $this->assertStore($data, $data + ['type' => CastMember::TYPE_DIRECTOR, 'deleted_at' => null]);
        $this->assertResourceValid($response);

        $data = [
            'name' => 'teste',
            'type' => CastMember::TYPE_ACTOR
        ];
        $response = $this->assertStore($data, $data + ['deleted_at' => null]);
        $this->assertResourceValid($response);
    }

    public function testUpdate()
    {
        $data = [
            'name' => 'teste',
            'type' => CastMember::TYPE_ACTOR
        ];
        $response = $this->assertUpdate($data, $data + ['deleted_at' => null]);
        $this->assertResourceValid($response);

        $data = [
            'name' => 'teste',
            'type' => CastMember::TYPE_ACTOR
        ];
        $this->assertUpdate($data, array_merge($data, ['type' => CastMember::TYPE_ACTOR]));
    }

    public function testDestroy()
    {
        $response = $this->json('DELETE', route('api.cast_members.destroy', $this->cast_member->id));

        $response
            ->assertStatus(204);

        self::assertNull(CastMember::find($this->cast_member->id));
        self::assertNotNull(CastMember::withTrashed()->find($this->cast_member->id));
    }

    protected function getRouteIndex()
    {
        return route('api.cast_members.index');
    }

    protected function getRouteShow()
    {
        return route('api.cast_members.show', $this->cast_member->id);
    }

    protected function getRouteStore()
    {
        return route('api.cast_members.store');
    }

    protected function getRouteUpdate()
    {
        return route('api.cast_members.update', $this->cast_member->id);
    }

    protected function getModel()
    {
        return CastMember::class;
    }

    protected function getModelItem()
    {
        return $this->cast_member;
    }

    protected function getSerializedFields()
    {
        return $this->serializedFields;
    }

    protected function getResourceCollection(): string
    {
        return $this->getResource();
    }

    protected function getResource(): string
    {
        return CastMemberResource::class;
    }
}
