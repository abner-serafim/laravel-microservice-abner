<?php

namespace Tests\Feature\Http\Controllers\Api;

use App\Models\Category;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\Feature\Traits\TestSaves;
use Tests\Feature\Traits\TestValidations;
use Tests\TestCase;

class CategoryControllerTest extends TestCase
{
    use DatabaseMigrations, TestValidations, TestSaves;

    protected $category;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->category = Category::factory()->create();
    }

    public function testIndex()
    {
        $response = $this->get(route('api.categories.index'));
        $response->assertStatus(200)->assertJson([$this->category->toArray()]);
    }

    public function testShow()
    {
        $response = $this->get(route('api.categories.show', $this->category->id));
        $response->assertStatus(200)->assertJson($this->category->toArray());
    }

    public function testInvalidationData()
    {
        $data = [
            'name' => ''
        ];
        $this->assertInvalidationInStoreAction($data, $this->validRequired);
        $this->assertInvalidationInUpdateAction($data, $this->validRequired);

        $data = [
            'name' => str_repeat('a', 256)
        ];
        $this->assertInvalidationInStoreAction($data, $this->validMax, $this->limitMax);
        $this->assertInvalidationInUpdateAction($data, $this->validMax, $this->limitMax);

        $data = [
            'is_active' => 'a'
        ];
        $this->assertInvalidationInStoreAction($data, $this->validBool);
        $this->assertInvalidationInUpdateAction($data, $this->validBool);
    }

    public function testStore()
    {
        $data = [
            'name' => 'test'
        ];
        $response = $this->assertStore($data, $data + ['description' => null, 'is_active' => true, 'deleted_at' => null]);
        $response->assertJsonStructure([
            'created_at', 'updated_at'
        ]);

        $data = [
            'name' => 'teste',
            'description' => 'description_test',
            'is_active' => false
        ];
        $this->assertStore($data, $data + ['deleted_at' => null]);
    }

    public function testUpdate()
    {
        $this->category = Category::factory()->create([
            'description' => 'description',
            'is_active' => false
        ]);

        $data = [
            'name' => 'teste',
            'description' => null,
            'is_active' => true
        ];
        $response = $this->assertUpdate($data, $data + ['deleted_at' => null]);
        $response->assertJsonStructure([
            'created_at', 'updated_at'
        ]);

        $data = [
            'name' => 'teste',
            'description' => ''
        ];
        $this->assertUpdate($data, array_merge($data, ['description' => null]));

        $data['description'] = 'test';
        $this->assertUpdate($data, array_merge($data, ['description' => 'test']));

        $data['description'] = null;
        $this->assertUpdate($data, array_merge($data, ['description' => null]));
    }

    public function testDelete()
    {
        $response = $this->json('DELETE', route('api.categories.destroy', $this->category->id));

        $response
            ->assertStatus(204);

        self::assertNull(Category::find($this->category->id));
        self::assertNotNull(Category::withTrashed()->find($this->category->id));
    }

    protected function getRouteStore()
    {
        return route('api.categories.store');
    }

    protected function getRouteUpdate()
    {
        return route('api.categories.update', $this->category->id);
    }

    protected function getModel()
    {
        return Category::class;
    }
}
