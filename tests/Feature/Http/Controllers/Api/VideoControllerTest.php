<?php

namespace Tests\Feature\Http\Controllers\Api;

use App\Models\Video;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\Traits\TestSaves;
use Tests\Traits\TestValidations;
use Tests\TestCase;

class VideoControllerTest extends TestCase
{
    use DatabaseMigrations, TestValidations, TestSaves;

    protected $video;
    protected $sendData;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->video = Video::factory()->create();
        $this->sendData = [
            'title' => 'title',
            'description' => 'description',
            'year_launched' => 2010,
            'rating' => Video::RATING_LIST[0],
            'duration' => 90,
        ];
    }

    public function testIndex()
    {
        $response = $this->get(route('api.videos.index'));
        $response->assertStatus(200)->assertJson([$this->video->toArray()]);
    }

    public function testShow()
    {
        $response = $this->get(route('api.videos.show', $this->video->id));
        $response->assertStatus(200)->assertJson($this->video->toArray());
    }

    public function testInvalidationRequired()
    {
        $data = [
            'title' => '',
            'description' => '',
            'year_launched' => '',
            'rating' => '',
            'duration' => '',
        ];
        $this->assertInvalidationInStoreAction($data, $this->validRequired);
        $this->assertInvalidationInUpdateAction($data, $this->validRequired);
    }

    public function testInvalidationMax()
    {
        $data = [
            'title' => str_repeat('a', 256)
        ];
        $this->assertInvalidationInStoreAction($data, $this->validMax, $this->limitMax);
        $this->assertInvalidationInUpdateAction($data, $this->validMax, $this->limitMax);
    }

    public function testInvalidationInteger()
    {
        $data = [
            'duration' => 'a'
        ];
        $this->assertInvalidationInStoreAction($data, $this->validInteger);
        $this->assertInvalidationInUpdateAction($data, $this->validInteger);
    }

    public function testInvalidationBoolean()
    {
        $data = [
            'opened' => 'a'
        ];
        $this->assertInvalidationInStoreAction($data, $this->validBool);
        $this->assertInvalidationInUpdateAction($data, $this->validBool);
    }

    public function testInvalidationRating()
    {
        $data = [
            'rating' => 'a',
        ];
        $this->assertInvalidationInStoreAction($data, $this->validIn);
        $this->assertInvalidationInUpdateAction($data, $this->validIn);

        $data = [
            'rating' => 0,
        ];
        $this->assertInvalidationInStoreAction($data, $this->validIn);
        $this->assertInvalidationInUpdateAction($data, $this->validIn);
    }

    public function testInvalidationYearLaunchedField()
    {
        $data = [
            'year_launched' => 'a'
        ];
        $this->assertInvalidationInStoreAction($data, $this->validDateFormat, $this->formatY);
        $this->assertInvalidationInUpdateAction($data, $this->validDateFormat, $this->formatY);
    }

    public function testStoreUpdate()
    {
        $datas = [
            [
                'send_data' => $this->sendData + ['opened' => false],
                'test_data' => $this->sendData + ['opened' => false],
            ],
            [
                'send_data' => $this->sendData + ['opened' => true],
                'test_data' => $this->sendData + ['opened' => true],
            ],
            [
                'send_data' => $this->sendData + ['rating' => Video::RATING_LIST[1]],
                'test_data' => $this->sendData + ['rating' => Video::RATING_LIST[1]],
            ],
        ];

        $responseStore = null;
        $responseUpdate = null;

        foreach ($datas AS $data) {
            $responseStore = $this->assertStore($data['send_data'], $data['test_data']);
            $responseUpdate = $this->assertUpdate($data['send_data'], $data['test_data']);
        }

        if ($responseStore) $responseStore->assertJsonStructure([
            'created_at', 'updated_at'
        ]);

        if ($responseUpdate) $responseUpdate->assertJsonStructure([
            'created_at', 'updated_at'
        ]);
    }

    public function testDestroy()
    {
        $response = $this->json('DELETE', route('api.videos.destroy', $this->video->id));

        $response
            ->assertStatus(204);

        self::assertNull(Video::find($this->video->id));
        self::assertNotNull(Video::withTrashed()->find($this->video->id));
    }

    protected function getRouteStore()
    {
        return route('api.videos.store');
    }

    protected function getRouteUpdate()
    {
        return route('api.videos.update', $this->video->id);
    }

    protected function getModel()
    {
        return Video::class;
    }
}
