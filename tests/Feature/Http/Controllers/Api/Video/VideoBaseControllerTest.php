<?php

namespace Tests\Feature\Http\Controllers\Api\Video;

use App\Http\Controllers\Api\VideoController;
use App\Http\Resources\VideoResource;
use App\Models\Category;
use App\Models\Genre;
use App\Models\Video;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Http\Request;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Illuminate\Testing\TestResponse;
use Tests\Exceptions\TestException;
use Tests\Traits\TestResources;
use Tests\Traits\TestSaves;
use Tests\Traits\TestValidations;
use Tests\TestCase;

abstract class VideoBaseControllerTest extends TestCase
{
    use DatabaseMigrations, TestValidations, TestSaves;

    protected $video;
    protected $sendData;
    protected $serializedFields = [
        'id',
        'title',
        'description',
        'year_launched',
        'opened',
        'rating',
        'duration',
        'video_file',
        'trailer_file',
        'banner_file',
        'thumb_file',
        'created_at',
        'updated_at',
        'deleted_at',
        'thumb_file_url',
        'banner_file_url',
        'trailer_file_url',
        'video_file_url',
        'categories' => [
            '*' => [
                'id',
                'name',
                'description',
                'is_active',
                'created_at',
                'updated_at',
                'deleted_at',
            ]
        ],
        'genres' => [
            '*' => [
                'id',
                'name',
                'is_active',
                'created_at',
                'updated_at',
                'deleted_at',
                'categories' => [
                    '*' => [
                        'id',
                        'name',
                        'description',
                        'is_active',
                        'created_at',
                        'updated_at',
                        'deleted_at',
                    ]
                ]
            ]
        ]
    ];

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->video = Video::factory()->create();
        $this->sendData = [
            'title' => 'title',
            'description' => 'description',
            'year_launched' => 2010,
            'rating' => Video::RATING_LIST[0],
            'duration' => 90,
        ];
    }

    protected function assertHasCategory($categoryId, $videoId)
    {
        $this->assertDatabaseHas('category_video', [
            'category_id' => $categoryId,
            'video_id' => $videoId,
        ]);
    }

    protected function assertHasGenre($genreId, $videoId)
    {
        $this->assertDatabaseHas('genre_video', [
            'genre_id' => $genreId,
            'video_id' => $videoId,
        ]);
    }

    protected function assertIfFilesUrlExists(Video $video, TestResponse $response)
    {
        $video->refresh();
        $fileFields = Video::$fileFields;
        $data = $response->json('data');
        $data = array_key_exists(0, $data) ? $data[0] : $data;
        foreach ($fileFields as $field) {
            $file = $video->{$field};
            $fileLink = $video->relativeFilePath($file);
            $fileUrl = $fileLink ? Storage::url($fileLink) : $fileLink;

            self::assertEquals(
                $fileUrl,
                $data[$field . '_url']
            );
        }
    }

    protected function getFiles()
    {
        return [
            'thumb_file' => UploadedFile::fake()->create('thumb_file.jpg'),
            'banner_file' => UploadedFile::fake()->create('banner_file.jpg'),
            'trailer_file' => UploadedFile::fake()->create('trailer_file.mp4'),
            'video_file' => UploadedFile::fake()->create('video_file.mp4'),
        ];
    }

    protected function getRouteIndex()
    {
        return route('api.videos.index');
    }

    protected function getRouteShow()
    {
        return route('api.videos.show', $this->video->id);
    }

    protected function getRouteStore()
    {
        return route('api.videos.store');
    }

    protected function getRouteUpdate()
    {
        return route('api.videos.update', $this->video->id);
    }

    protected function getModel()
    {
        return Video::class;
    }

    protected function getModelItem()
    {
        return $this->video;
    }

    protected function getSerializedFields()
    {
        return $this->serializedFields;
    }

    protected function getResourceCollection(): string
    {
        return $this->getResource();
    }

    protected function getResource(): string
    {
        return VideoResource::class;
    }
}
