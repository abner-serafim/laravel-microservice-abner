<?php

namespace Tests\Feature\Models;

use App\Models\Video;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Ramsey\Uuid\Uuid;
use Tests\TestCase;

class VideoTest extends TestCase
{
    use DatabaseMigrations;

    protected $sendData;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->sendData = [
            'title' => 'title',
            'description' => 'description',
            'year_launched' => 2010,
            'opened' => true,
            'rating' => Video::RATING_LIST[0],
            'duration' => 90,
        ];
    }

    public function testList()
    {
        Video::create($this->sendData);
        $fields = [
            'id',
            'title',
            'description',
            'year_launched',
            'opened',
            'rating',
            'duration',
            'created_at',
            'updated_at',
            'deleted_at',
        ];
        $categories = Video::all();
        $categoriesKey = array_keys($categories->first()->getAttributes());
        $this->assertEqualsCanonicalizing($fields, $categoriesKey);
    }

    public function testCreate()
    {
        $category = Video::create($this->sendData);
        $category->refresh();

        $this->assertTrue(Uuid::isValid($category->id));

        foreach ($this->sendData AS $key => $value) {
            self::assertEquals($value, $category->{$key});
        }
        $this->assertNotNull($category->description);
        $this->assertTrue($category->opened);
    }

    public function testUpdate()
    {
        $categoryAll = Video::factory(1)->create();
        $category = $categoryAll->first();

        $category->update($this->sendData);
        $category = Video::find($category->id);

        foreach ($this->sendData AS $key => $value) {
            self::assertEquals($value, $category->{$key});
        }
    }

    public function testDelete()
    {
        $category = Video::factory()->create();
        $category->delete();
        self::assertNull(Video::find($category->id));

        $category->restore();
        self::assertNotNull(Video::find($category->id));
    }
}
