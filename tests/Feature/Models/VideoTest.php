<?php

namespace Tests\Feature\Models;

use App\Models\Video;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Ramsey\Uuid\Uuid;
use Tests\TestCase;

class VideoTest extends TestCase
{
    use DatabaseMigrations;

    protected $sendData;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->sendData = [
            'title' => 'title',
            'description' => 'description',
            'year_launched' => 2010,
            'opened' => true,
            'rating' => Video::RATING_LIST[0],
            'duration' => 90,
        ];
    }

    public function testList()
    {
        Video::create($this->sendData);
        $fields = [
            'id',
            'title',
            'description',
            'year_launched',
            'opened',
            'rating',
            'duration',
            'created_at',
            'updated_at',
            'deleted_at',
        ];
        $categories = Video::all();
        $categoriesKey = array_keys($categories->first()->getAttributes());
        $this->assertEqualsCanonicalizing($fields, $categoriesKey);
    }

    public function testCreate()
    {
        $video = Video::create($this->sendData);
        $video->refresh();

        $this->assertTrue(Uuid::isValid($video->id));

        foreach ($this->sendData AS $key => $value) {
            self::assertEquals($value, $video->{$key});
        }
        $this->assertNotNull($video->description);
        $this->assertTrue($video->opened);
    }

    public function testUpdate()
    {
        $videoAll = Video::factory(1)->create();
        $video = $videoAll->first();

        $video->update($this->sendData);
        $video = Video::find($video->id);

        foreach ($this->sendData AS $key => $value) {
            self::assertEquals($value, $video->{$key});
        }
    }

    public function testDelete()
    {
        $video = Video::factory()->create();
        $video->delete();
        self::assertNull(Video::find($video->id));

        $video->restore();
        self::assertNotNull(Video::find($video->id));
    }
}
